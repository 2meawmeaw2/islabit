// app/(tabs)/_layout.tsx
import React, { useMemo, useRef, useEffect } from "react";
import {
  Text,
  View,
  Pressable,
  useColorScheme,
  I18nManager,
  Animated,
} from "react-native";
import { Tabs, router, usePathname } from "expo-router";
import { Feather } from "@expo/vector-icons";
import { useSafeAreaInsets } from "react-native-safe-area-context";
import * as Haptics from "expo-haptics";
import { AuthGuard } from "@/components/AuthGuard";

// Brand colors
const ACCENT = "#00AEEF";

export default function TabsLayout() {
  const insets = useSafeAreaInsets();
  const pathname = usePathname();

  const isDark = true;

  // Only show the bar on top-level tab routes
  const shouldShowTabBar = useMemo(() => {
    return (
      pathname === "/home" ||
      pathname === "/time" ||
      pathname === "/settings" ||
      pathname === "/home/index" ||
      pathname === "/time/index" ||
      pathname === "/settings/index"
    );
  }, [pathname]);

  // Color tokens
  const SURFACE = isDark ? "#0E1116" : "#FFFFFF";
  const TEXT_MUTED = isDark ? "#8B9198" : "#6B6B6B";
  const TEXT = isDark ? "#E6EAF0" : "#101317";
  const BORDER = isDark ? "rgba(255,255,255,0.08)" : "rgba(0,0,0,0.06)";

  return (
    <AuthGuard requireAuth={true}>
      <Tabs
        initialRouteName="time"
        screenOptions={{
          headerShown: false,
          tabBarShowLabel: false,
          tabBarHideOnKeyboard: true,
          tabBarStyle: { display: "none" },
        }}
        tabBar={(props) => {
          if (!shouldShowTabBar) return null;

          const { state, descriptors, navigation } = props;

          return (
            <View
              accessible
              accessibilityRole="tablist"
              style={{
                position: "absolute",
                left: 16,
                right: 16,
                bottom: Math.max(insets.bottom, 16) + 8,
                borderRadius: 24,
                backgroundColor: SURFACE,
                paddingHorizontal: 12,
                paddingVertical: 8,
                elevation: 8,
                borderWidth: 1,
                borderColor: BORDER,
              }}
            >
              <TabRow
                state={state}
                descriptors={descriptors}
                navigation={navigation}
                colors={{
                  SURFACE,
                  TEXT,
                  TEXT_MUTED,
                  ACCENT,
                }}
              />
            </View>
          );
        }}
      >
        <Tabs.Screen
          name="settings"
          options={{
            title: "حسابي",
            tabBarAccessibilityLabel: "حسابي",
            animation: "shift",
          }}
          listeners={{
            tabPress: (e) => {
              e.preventDefault();
              router.replace("/(tabs)/settings");
            },
          }}
        />
        <Tabs.Screen
          name="time"
          options={{
            title: "وقتي",
            animation: "shift",
            tabBarAccessibilityLabel: "وقتي",
          }}
          listeners={{
            tabPress: (e) => {
              e.preventDefault();
              router.replace("/(tabs)/time");
            },
          }}
        />
        <Tabs.Screen
          name="home"
          options={{
            title: "اكتشف",
            animation: "shift",
            tabBarAccessibilityLabel: "اكتشف",
          }}
          listeners={{
            tabPress: (e) => {
              e.preventDefault();
              router.replace("/(tabs)/home");
            },
          }}
        />
      </Tabs>
    </AuthGuard>
  );
}

function TabRow({ state, descriptors, navigation, colors }: any) {
  const indicatorAnim = useRef(new Animated.Value(state.index)).current;

  useEffect(() => {
    Animated.timing(indicatorAnim, {
      toValue: state.index,
      duration: 300,
      useNativeDriver: true,
    }).start();
  }, [state.index]);

  return (
    <View style={{ position: "relative", height: 56 }}>
      {/* Simple sliding indicator */}
      <Animated.View
        style={{
          position: "absolute",
          top: 4,
          bottom: 4,
          width: "33.33%",
          backgroundColor: `${colors.ACCENT}12`,
          borderRadius: 16,
          transform: [
            {
              translateX: indicatorAnim.interpolate({
                inputRange: [0, 1, 2],
                outputRange: ["0%", "100%", "200%"],
              }),
            },
          ],
        }}
      />

      <View
        style={{
          flexDirection: "row",
          height: "100%",
        }}
      >
        {state.routes.map((route: any, index: number) => {
          const { options } = descriptors[route.key];
          const label = options.title ?? route.name;
          const isFocused = state.index === index;

          return (
            <TabButton
              key={route.key}
              route={route}
              isFocused={isFocused}
              label={label}
              options={options}
              navigation={navigation}
              colors={colors}
            />
          );
        })}
      </View>
    </View>
  );
}

function TabButton({
  route,
  isFocused,
  label,
  options,
  navigation,
  colors,
}: any) {
  const scaleAnim = useRef(new Animated.Value(1)).current;

  // Map route to icon
  const iconName =
    route.name === "time" ? "clock" : route.name === "home" ? "search" : "user";

  const onPress = () => {
    const event = navigation.emit({
      type: "tabPress",
      target: route.key,
      canPreventDefault: true,
    });

    if (!isFocused && !event.defaultPrevented) {
      // Gentle haptic feedback
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
      navigation.navigate(route.name);
    }
  };

  const onPressIn = () => {
    Animated.spring(scaleAnim, {
      toValue: 0.95,
      useNativeDriver: true,
      tension: 200,
      friction: 4,
    }).start();
  };

  const onPressOut = () => {
    Animated.spring(scaleAnim, {
      toValue: 1,
      useNativeDriver: true,
      tension: 200,
      friction: 4,
    }).start();
  };

  return (
    <Pressable
      onPress={onPress}
      onPressIn={onPressIn}
      onPressOut={onPressOut}
      accessibilityRole="tab"
      accessibilityState={isFocused ? { selected: true } : {}}
      accessibilityLabel={options.tabBarAccessibilityLabel ?? label}
      android_ripple={{
        color: `${colors.ACCENT}15`,
        borderless: true,
      }}
      style={{
        flex: 1,
        alignItems: "center",
        justifyContent: "center",
        paddingVertical: 8,
        borderRadius: 16,
      }}
      hitSlop={8}
    >
      <Animated.View
        style={{
          alignItems: "center",
          justifyContent: "center",
          gap: 4,
          transform: [{ scale: scaleAnim }],
        }}
      >
        <Feather
          name={iconName as any}
          size={22}
          color={isFocused ? colors.ACCENT : colors.TEXT_MUTED}
          style={
            iconName === "search" && I18nManager.isRTL
              ? { transform: [{ rotateY: "180deg" }] }
              : undefined
          }
        />
        <Text
          style={{
            color: isFocused ? colors.ACCENT : colors.TEXT_MUTED,
            fontSize: 11,
            fontFamily: "ibm-plex-arabic-medium",
            fontWeight: isFocused ? "600" : "500",
          }}
        >
          {label}
        </Text>
      </Animated.View>
    </Pressable>
  );
}
